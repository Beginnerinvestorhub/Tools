version: '3.9'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    env_file:
      - ./frontend/.env.production
    restart: unless-stopped
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    ports:
      - "4000:4000"
    environment:
      - NODE_ENV=production
    env_file:
      - ./backend/.env.production
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  python-engine:
    build:
      context: ./python-engine
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
    env_file:
      - ./python-engine/.env.production
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  ai-behavioral-nudge-engine:
    build:
      context: ./tools/services/ai-behavioral-nudge-engine
      dockerfile: Dockerfile
      target: production
    ports:
      - "8001:8000"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
    env_file:
      - ./tools/services/ai-behavioral-nudge-engine/.env.production
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  market-data-ingestion:
    build:
      context: ./tools/services/market-data-ingestion
      dockerfile: Dockerfile
      target: production
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
    env_file:
      - ./tools/services/market-data-ingestion/.env.production
    restart: unless-stopped
    depends_on:
      - postgres
      - redis

  risk-calculation-engine:
    build:
      context: ./tools/services/risk-calculation-engine
      dockerfile: Dockerfile
      target: production
    ports:
      - "8002:8000"
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=production
    env_file:
      - ./tools/services/risk-calculation-engine/.env.production
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-investment_hub}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/seeds:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: investment-hub-network
